# Default values for jitsi-meet.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

enableAuth: false
enableGuests: true

tz: Europe/Amsterdam

image:
  pullPolicy: IfNotPresent

web:
  replicaCount: 1
  image:
    repository: jitsi/web

  extraEnvs: {}
  service:
    type: ClusterIP
    port: 80
    externalIPs: []

  ingress:
    enabled: true
    annotations:
      cert.gardener.cloud/issuer: ci-issuer
      cert.gardener.cloud/purpose: managed
      dns.gardener.cloud/class: garden
      dns.gardener.cloud/dnsnames: guest.jitsi.alt.apps.onmetal.de,jitsi.alt.apps.onmetal.de
      dns.gardener.cloud/ttl: "60"
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
    - host: jitsi.alt.apps.onmetal.de
      paths: ['/']
    tls:
    - hosts:
      - "*.jitsi.alt.apps.onmetal.de"
      - "*.alt.apps.onmetal.de"
      secretName: jitsi-certificates

  # Useful for ingresses that don't support http-to-https redirect by themself, (namely: GKE),
  httpRedirect: false

  # When tls-termination by the ingress is not wanted, enable this and set web.service.type=Loadbalancer
  httpsEnabled: false

  livenessProbe:
    httpGet:
      path: /
      port: http
  readinessProbe:
    httpGet:
      path: /
      port: http

  podSecurityContext: {}
    # fsGroup: 2000

  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  resources: {}
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  nodeSelector: {}

  tolerations: []

  affinity: {}

jicofo:
  replicaCount: 1
  image:
    repository: jitsi/jicofo

  xmpp:
    user: focus
    password:
    componentSecret:

  livenessProbe:
    tcpSocket:
      port: 8888
  readinessProbe:
    tcpSocket:
      port: 8888

  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: {}

jvb:
  publicIP: # Public IP vom jvb service hier eintragen
  replicaCount: 1
  image:
    repository: jitsi/jvb

  xmpp:
    user: jvb
    password:

  useHostPort: false
  enableTCP: false
  UDPPort: 10000
  TCPPort: 4443
  service:
    enabled: true
    type: LoadBalancer
    externalIPs: [] # Und hier _vermutlich_ auch. Werde's noch testen

  breweryMuc: jvbbrewery

  livenessProbe:
    exec:
      command:
      - pgrep
      - java
  readinessProbe:
    exec:
      command:
      - pgrep
      - java

  podSecurityContext: {}
  securityContext: {}
  resources: {}
  nodeSelector: {}
  tolerations: []
  affinity: {}
  extraEnvs: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

xmpp:
  domain: alt.apps.onmetal.de
  authDomain: auth.alt.apps.onmetal.de
  mucDomain: muc.alt.apps.onmetal.de
  internalMucDomain: internal-muc.alt.apps.onmetal.de
  guestDomain: guest.jitsi.alt.apps.onmetal.de

extraCommonEnvs: {}

prosody:
  enabled: true
  server:
  extraEnvFrom:
  - secretRef:
      name: '{{ include "prosody.fullname" . }}-jicofo'
  - secretRef:
      name: '{{ include "prosody.fullname" . }}-jvb'
  - configMapRef:
      name: '{{ include "prosody.fullname" . }}-common'
  image:
    repository: jitsi/prosody
    tag: 'stable-4627-1'
